# coding: utf-8

"""
    Turing Minimal Openapi Spec for SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel
from routers.client.models.ensembling_job_ensembler_spec import EnsemblingJobEnsemblerSpec
from routers.client.models.ensembling_job_prediction_source import EnsemblingJobPredictionSource
from routers.client.models.ensembling_job_sink import EnsemblingJobSink
from routers.client.models.ensembling_job_source import EnsemblingJobSource
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EnsemblingJobSpec(BaseModel):
    """
    Ensembling job Specification
    """ # noqa: E501
    source: EnsemblingJobSource
    predictions: Dict[str, EnsemblingJobPredictionSource]
    ensembler: EnsemblingJobEnsemblerSpec
    sink: EnsemblingJobSink
    __properties: ClassVar[List[str]] = ["source", "predictions", "ensembler", "sink"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EnsemblingJobSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in predictions (dict)
        _field_dict = {}
        if self.predictions:
            for _key in self.predictions:
                if self.predictions[_key]:
                    _field_dict[_key] = self.predictions[_key].to_dict()
            _dict['predictions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of ensembler
        if self.ensembler:
            _dict['ensembler'] = self.ensembler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sink
        if self.sink:
            _dict['sink'] = self.sink.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EnsemblingJobSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": EnsemblingJobSource.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "predictions": dict(
                (_k, EnsemblingJobPredictionSource.from_dict(_v))
                for _k, _v in obj.get("predictions").items()
            )
            if obj.get("predictions") is not None
            else None,
            "ensembler": EnsemblingJobEnsemblerSpec.from_dict(obj.get("ensembler")) if obj.get("ensembler") is not None else None,
            "sink": EnsemblingJobSink.from_dict(obj.get("sink")) if obj.get("sink") is not None else None
        })
        return _obj


