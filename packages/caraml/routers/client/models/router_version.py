# coding: utf-8

"""
    Turing Minimal Openapi Spec for SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from routers.client.models.autoscaling_policy import AutoscalingPolicy
from routers.client.models.default_traffic_rule import DefaultTrafficRule
from routers.client.models.enricher import Enricher
from routers.client.models.experiment_config import ExperimentConfig
from routers.client.models.protocol import Protocol
from routers.client.models.resource_request import ResourceRequest
from routers.client.models.route import Route
from routers.client.models.router import Router
from routers.client.models.router_ensembler_config import RouterEnsemblerConfig
from routers.client.models.router_version_log_config import RouterVersionLogConfig
from routers.client.models.router_version_status import RouterVersionStatus
from routers.client.models.traffic_rule import TrafficRule
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RouterVersion(BaseModel):
    """
    RouterVersion
    """ # noqa: E501
    id: Optional[StrictInt] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    router: Optional[Router] = None
    version: Optional[StrictInt] = None
    status: Optional[RouterVersionStatus] = None
    error: Optional[StrictStr] = None
    image: Optional[StrictStr] = None
    routes: Optional[List[Route]] = None
    experiment_engine: Optional[ExperimentConfig] = None
    resource_request: Optional[ResourceRequest] = None
    autoscaling_policy: Optional[AutoscalingPolicy] = None
    timeout: Optional[Annotated[str, Field(strict=True)]] = None
    protocol: Optional[Protocol] = None
    log_config: Optional[RouterVersionLogConfig] = None
    enricher: Optional[Enricher] = None
    ensembler: Optional[RouterEnsemblerConfig] = None
    monitoring_url: Optional[StrictStr] = None
    default_route_id: Optional[StrictStr] = None
    rules: Optional[List[TrafficRule]] = None
    default_traffic_rule: Optional[DefaultTrafficRule] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "updated_at", "router", "version", "status", "error", "image", "routes", "experiment_engine", "resource_request", "autoscaling_policy", "timeout", "protocol", "log_config", "enricher", "ensembler", "monitoring_url", "default_route_id", "rules", "default_traffic_rule"]

    @field_validator('timeout')
    def timeout_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]+(ms|s|m|h)$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+(ms|s|m|h)$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RouterVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "created_at",
                "updated_at",
                "monitoring_url",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of router
        if self.router:
            _dict['router'] = self.router.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item in self.routes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['routes'] = _items
        # override the default output from pydantic by calling `to_dict()` of experiment_engine
        if self.experiment_engine:
            _dict['experiment_engine'] = self.experiment_engine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_request
        if self.resource_request:
            _dict['resource_request'] = self.resource_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of autoscaling_policy
        if self.autoscaling_policy:
            _dict['autoscaling_policy'] = self.autoscaling_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log_config
        if self.log_config:
            _dict['log_config'] = self.log_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enricher
        if self.enricher:
            _dict['enricher'] = self.enricher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ensembler
        if self.ensembler:
            _dict['ensembler'] = self.ensembler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item in self.rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_traffic_rule
        if self.default_traffic_rule:
            _dict['default_traffic_rule'] = self.default_traffic_rule.to_dict()
        # set to None if router (nullable) is None
        # and model_fields_set contains the field
        if self.router is None and "router" in self.model_fields_set:
            _dict['router'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RouterVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "router": Router.from_dict(obj.get("router")) if obj.get("router") is not None else None,
            "version": obj.get("version"),
            "status": obj.get("status"),
            "error": obj.get("error"),
            "image": obj.get("image"),
            "routes": [Route.from_dict(_item) for _item in obj.get("routes")] if obj.get("routes") is not None else None,
            "experiment_engine": ExperimentConfig.from_dict(obj.get("experiment_engine")) if obj.get("experiment_engine") is not None else None,
            "resource_request": ResourceRequest.from_dict(obj.get("resource_request")) if obj.get("resource_request") is not None else None,
            "autoscaling_policy": AutoscalingPolicy.from_dict(obj.get("autoscaling_policy")) if obj.get("autoscaling_policy") is not None else None,
            "timeout": obj.get("timeout"),
            "protocol": obj.get("protocol"),
            "log_config": RouterVersionLogConfig.from_dict(obj.get("log_config")) if obj.get("log_config") is not None else None,
            "enricher": Enricher.from_dict(obj.get("enricher")) if obj.get("enricher") is not None else None,
            "ensembler": RouterEnsemblerConfig.from_dict(obj.get("ensembler")) if obj.get("ensembler") is not None else None,
            "monitoring_url": obj.get("monitoring_url"),
            "default_route_id": obj.get("default_route_id"),
            "rules": [TrafficRule.from_dict(_item) for _item in obj.get("rules")] if obj.get("rules") is not None else None,
            "default_traffic_rule": DefaultTrafficRule.from_dict(obj.get("default_traffic_rule")) if obj.get("default_traffic_rule") is not None else None
        })
        return _obj


