# coding: utf-8

"""
    Turing Minimal Openapi Spec for SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from routers.client.models.big_query_config import BigQueryConfig
from routers.client.models.kafka_config import KafkaConfig
from routers.client.models.result_logger_type import ResultLoggerType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RouterVersionConfigLogConfig(BaseModel):
    """
    RouterVersionConfigLogConfig
    """ # noqa: E501
    result_logger_type: Optional[ResultLoggerType] = None
    bigquery_config: Optional[BigQueryConfig] = None
    kafka_config: Optional[KafkaConfig] = None
    __properties: ClassVar[List[str]] = ["result_logger_type", "bigquery_config", "kafka_config"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RouterVersionConfigLogConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bigquery_config
        if self.bigquery_config:
            _dict['bigquery_config'] = self.bigquery_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kafka_config
        if self.kafka_config:
            _dict['kafka_config'] = self.kafka_config.to_dict()
        # set to None if bigquery_config (nullable) is None
        # and model_fields_set contains the field
        if self.bigquery_config is None and "bigquery_config" in self.model_fields_set:
            _dict['bigquery_config'] = None

        # set to None if kafka_config (nullable) is None
        # and model_fields_set contains the field
        if self.kafka_config is None and "kafka_config" in self.model_fields_set:
            _dict['kafka_config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RouterVersionConfigLogConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "result_logger_type": obj.get("result_logger_type"),
            "bigquery_config": BigQueryConfig.from_dict(obj.get("bigquery_config")) if obj.get("bigquery_config") is not None else None,
            "kafka_config": KafkaConfig.from_dict(obj.get("kafka_config")) if obj.get("kafka_config") is not None else None
        })
        return _obj


