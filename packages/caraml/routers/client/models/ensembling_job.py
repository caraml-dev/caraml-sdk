# coding: utf-8

"""
    Turing Minimal Openapi Spec for SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from routers.client.models.ensembler_config import EnsemblerConfig
from routers.client.models.ensembler_infra_config import EnsemblerInfraConfig
from routers.client.models.ensembler_job_status import EnsemblerJobStatus
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EnsemblingJob(BaseModel):
    """
    A JSON object that represents an ensembling job for batch experiment use cases
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=50)]] = None
    project_id: Optional[StrictInt] = None
    ensembler_id: Optional[StrictInt] = None
    environment_name: Optional[StrictStr] = None
    infra_config: Optional[EnsemblerInfraConfig] = None
    job_config: Optional[EnsemblerConfig] = None
    status: Optional[EnsemblerJobStatus] = None
    error: Optional[StrictStr] = None
    monitoring_url: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "name", "project_id", "ensembler_id", "environment_name", "infra_config", "job_config", "status", "error", "monitoring_url", "created_at", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EnsemblingJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "name",
                "monitoring_url",
                "created_at",
                "updated_at",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of infra_config
        if self.infra_config:
            _dict['infra_config'] = self.infra_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_config
        if self.job_config:
            _dict['job_config'] = self.job_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EnsemblingJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "project_id": obj.get("project_id"),
            "ensembler_id": obj.get("ensembler_id"),
            "environment_name": obj.get("environment_name"),
            "infra_config": EnsemblerInfraConfig.from_dict(obj.get("infra_config")) if obj.get("infra_config") is not None else None,
            "job_config": EnsemblerConfig.from_dict(obj.get("job_config")) if obj.get("job_config") is not None else None,
            "status": obj.get("status"),
            "error": obj.get("error"),
            "monitoring_url": obj.get("monitoring_url"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


