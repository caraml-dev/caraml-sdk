# coding: utf-8

"""
    Turing Minimal Openapi Spec for SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from routers.client.models.ensembler_docker_config import EnsemblerDockerConfig
from routers.client.models.ensembler_pyfunc_config import EnsemblerPyfuncConfig
from routers.client.models.ensembler_standard_config import EnsemblerStandardConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RouterEnsemblerConfig(BaseModel):
    """
    RouterEnsemblerConfig
    """ # noqa: E501
    id: Optional[StrictInt] = None
    type: StrictStr = Field(description="type of ensembler")
    standard_config: Optional[EnsemblerStandardConfig] = None
    docker_config: Optional[EnsemblerDockerConfig] = None
    pyfunc_config: Optional[EnsemblerPyfuncConfig] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "type", "standard_config", "docker_config", "pyfunc_config", "created_at", "updated_at"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('standard', 'docker', 'pyfunc'):
            raise ValueError("must be one of enum values ('standard', 'docker', 'pyfunc')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RouterEnsemblerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "created_at",
                "updated_at",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of standard_config
        if self.standard_config:
            _dict['standard_config'] = self.standard_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docker_config
        if self.docker_config:
            _dict['docker_config'] = self.docker_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pyfunc_config
        if self.pyfunc_config:
            _dict['pyfunc_config'] = self.pyfunc_config.to_dict()
        # set to None if standard_config (nullable) is None
        # and model_fields_set contains the field
        if self.standard_config is None and "standard_config" in self.model_fields_set:
            _dict['standard_config'] = None

        # set to None if docker_config (nullable) is None
        # and model_fields_set contains the field
        if self.docker_config is None and "docker_config" in self.model_fields_set:
            _dict['docker_config'] = None

        # set to None if pyfunc_config (nullable) is None
        # and model_fields_set contains the field
        if self.pyfunc_config is None and "pyfunc_config" in self.model_fields_set:
            _dict['pyfunc_config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RouterEnsemblerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "standard_config": EnsemblerStandardConfig.from_dict(obj.get("standard_config")) if obj.get("standard_config") is not None else None,
            "docker_config": EnsemblerDockerConfig.from_dict(obj.get("docker_config")) if obj.get("docker_config") is not None else None,
            "pyfunc_config": EnsemblerPyfuncConfig.from_dict(obj.get("pyfunc_config")) if obj.get("pyfunc_config") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


