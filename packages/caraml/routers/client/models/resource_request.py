# coding: utf-8

"""
    Turing Minimal Openapi Spec for SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ResourceRequest(BaseModel):
    """
    ResourceRequest
    """ # noqa: E501
    min_replica: Optional[StrictInt] = None
    max_replica: Optional[StrictInt] = None
    cpu_request: Optional[Annotated[str, Field(strict=True)]] = None
    memory_request: Optional[Annotated[str, Field(strict=True)]] = None
    __properties: ClassVar[List[str]] = ["min_replica", "max_replica", "cpu_request", "memory_request"]

    @field_validator('cpu_request')
    def cpu_request_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(\d{1,3}(\.\d{1,3})?)$|^(\d{2,5}m)$", value):
            raise ValueError(r"must validate the regular expression /^(\d{1,3}(\.\d{1,3})?)$|^(\d{2,5}m)$/")
        return value

    @field_validator('memory_request')
    def memory_request_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+(Ei?|Pi?|Ti?|Gi?|Mi?|Ki?)?$", value):
            raise ValueError(r"must validate the regular expression /^\d+(Ei?|Pi?|Ti?|Gi?|Mi?|Ki?)?$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ResourceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ResourceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "min_replica": obj.get("min_replica"),
            "max_replica": obj.get("max_replica"),
            "cpu_request": obj.get("cpu_request"),
            "memory_request": obj.get("memory_request")
        })
        return _obj


