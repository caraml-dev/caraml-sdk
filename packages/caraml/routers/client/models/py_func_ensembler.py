# coding: utf-8

"""
    Turing Minimal Openapi Spec for SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from routers.client.models.ensembler_type import EnsemblerType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PyFuncEnsembler(BaseModel):
    """
    PyFuncEnsembler
    """ # noqa: E501
    id: Optional[StrictInt] = None
    project_id: Optional[StrictInt] = None
    type: EnsemblerType
    name: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=20)]] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    mlflow_url: Optional[StrictStr] = None
    mlflow_experiment_id: Optional[StrictInt] = None
    mlflow_run_id: Optional[StrictStr] = None
    artifact_uri: Optional[StrictStr] = None
    python_version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "project_id", "type", "name", "created_at", "updated_at", "mlflow_url", "mlflow_experiment_id", "mlflow_run_id", "artifact_uri", "python_version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PyFuncEnsembler from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PyFuncEnsembler from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project_id": obj.get("project_id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "mlflow_url": obj.get("mlflow_url"),
            "mlflow_experiment_id": obj.get("mlflow_experiment_id"),
            "mlflow_run_id": obj.get("mlflow_run_id"),
            "artifact_uri": obj.get("artifact_uri"),
            "python_version": obj.get("python_version")
        })
        return _obj


