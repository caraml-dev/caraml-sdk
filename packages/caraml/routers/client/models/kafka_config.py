# coding: utf-8

"""
    Turing Minimal Openapi Spec for SDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class KafkaConfig(BaseModel):
    """
    KafkaConfig
    """ # noqa: E501
    brokers: Annotated[str, Field(strict=True)] = Field(description="Comma-separated list of host and port pairs that are the addresses of the Kafka brokers.")
    topic: Annotated[str, Field(strict=True)]
    serialization_format: StrictStr
    __properties: ClassVar[List[str]] = ["brokers", "topic", "serialization_format"]

    @field_validator('brokers')
    def brokers_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([a-zA-Z]+:\/\/)?\[?([0-9a-zA-Z\-%._:]*)\]?:([0-9]+)(,([a-zA-Z]+:\/\/)?\[?([0-9a-zA-Z\-%._:]*)\]?:([0-9]+))*$", value):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z]+:\/\/)?\[?([0-9a-zA-Z\-%._:]*)\]?:([0-9]+)(,([a-zA-Z]+:\/\/)?\[?([0-9a-zA-Z\-%._:]*)\]?:([0-9]+))*$/")
        return value

    @field_validator('topic')
    def topic_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z0-9_.-]{1,249}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9_.-]{1,249}$/")
        return value

    @field_validator('serialization_format')
    def serialization_format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('json', 'protobuf'):
            raise ValueError("must be one of enum values ('json', 'protobuf')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of KafkaConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of KafkaConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brokers": obj.get("brokers"),
            "topic": obj.get("topic"),
            "serialization_format": obj.get("serialization_format")
        })
        return _obj


